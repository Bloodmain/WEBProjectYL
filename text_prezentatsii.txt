Д - Добрый день! Сегодня мы хотели бы представить вам наш проект по WEB-разработке "Социальная сеть D&K на Django"
К - Социальная сеть «D&K» призвана проверить и углубить наши знания в сфере WEB-разработке, по большей части с помощью языка Python
Д - Естественно, соцсеть разработана для коммуникации людей, но в отличие от уже существующих “D&K” даёт нам возможность добавлять те фичи, которые нужны нам, и удалять ненужные.
К - Django - фраемворк (инструмент) для разработки WEB-приложений в частности сайтов. Его выбор был обусловлен следующими факторами:
    - Большое количество функций уже реализовано и автоматизировано, в сравнение с Flask
    - Удобная база данных и ORM в частности ManyToManyFields
    - Возможность "надстройки" и персонализации, к примеру замены базы данных на более мощную, WEBSoket`ы и др
Д - В нашем проекте находится достачно много моделей. Мы же выделили несколько самых важных и интересных. Первая из них это Профиль. В Django встроена модель User, однако полей в этих моделях недостаточно. Так что сделана связанная с User модель Profile. Она содержит поля: имя, фамилия, описание, аватар, дата рождения и другие.
К - Следующие интересные модели это News, Posts и Repost. Все посты социальной сети делятся на два типа: оригинальная новость и репост. Для простоты их использования была создана модель Post, которая ссылается на News или Repost
Д - Так же не маловажны является обсуждение постов и их лайки. Для это есть модели Likes и Commentary. Они содержат информация какой пользователь сделал лайк или написал комментарий и к какому посту.
К - Конечно, просто добавить в друзей пользователя нельзя, нужно отправить запрос, а в зависимости от ответа вы попадёте или в друзья, или в подписчики. Так и пришли модели FriendRequest, FriedShip и SubscriberShip
Д - Как уже было сказано ранее между некоторым моделями есть тесная связь. К примеру Профиль не может существовать без Юзера или если есть Новось, то есть и Пост который на неё ссылается. Django дает возможность при создании объекта Юзер или Новость создавать соответсвующие им Профиль и Пост
Д - Конечно, чистые HTML и CSS хороши, но рано или поздно будет момент, когда нужно будет обрабатывать данные на стороне клиента (к примеру, лайки). На помощь приходит JavaScript (И, для удобства, не в чистом виде, а с JQuery). Тут возникает необходимость из кода JS получать данные о моделях в Django, тут же нам поможет созданное API
К - Самое простое, что можно сделать: при клике на кнопку, менять класс объекта, а остальное оставить CSS
К - Уже сложнее работать с моделями. Возьмём, к примеру, лайки. Тогда при клике на изображение лайка, код должен изменить цвет картинки, кол-во лайков, а также создать новый объект модели Likes. Тут-то нам и пригодиться API
Д - Код JS посылает запрос на нужный url, который обрабатывается Django в нашем классе, который вернёт необходимые данные или вернет сообщение об ошибке или неправильном запросе.
Д - Самая важная часть социальной сети это переписка между пользователями. Для этого в нашем приложении есть модели Messages и Chats. Переписка же в режим реального времени реализована с помощью библиотеки channels и redis сервера. Когда пользователь открывает диалог с другим пользователем создается WEBSocket и если он напишет сообщение то это сообщение отправится во все WEBSocket`ы уже открытые в этом диалоге.
К - Есть некоторые фичи, которые уже находятся в процессе реализации, к примеру, сообщества и изменения многих полей модели Profile.
Остальные возможности в стадии планирования. Например, галерея, музыка и т.д.
К - Являясь очень сложной темой, WEB-разработка послужила испытанием на прочность, но мы его прошли и узнали множество аспектов этой сферы.